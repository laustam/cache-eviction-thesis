
@inproceedings{sieve,
  author = {Zhang, Yazhuo and Yang, Juncheng and Yue, Yao and Vigfusson, Ymir and Rashmi, K. V.},
  title = {SIEVE is simpler than LRU: an efficient turn-key eviction algorithm for web caches},
  year = {2024},
  isbn = {978-1-939133-39-7},
  publisher = {USENIX Association},
  address = {USA},
  abstract = {Caching is an indispensable technique for low-cost and fast data serving. The eviction algorithm, at the heart of a cache, has been primarily designed to maximize efficiency-- reducing the cache miss ratio. Many eviction algorithms have been designed in the past decades. However, they all trade off throughput, simplicity, or both for higher efficiency. Such a compromise often hinders adoption in production systems.This work presents SIEVE, an algorithm that is simpler than LRU and provides better than state-of-the-art efficiency and scalability for web cache workloads. We implemented SIEVE in five production cache libraries, requiring fewer than 20 lines of code changes on average. Our evaluation on 1559 cache traces from 7 sources shows that SIEVE achieves up to 63.2\% lower miss ratio than ARC. Moreover, SIEVE has a lower miss ratio than 9 state-of-the-art algorithms on more than 45\% of the 1559 traces, while the next best algorithm only has a lower miss ratio on 15\%. SIEVE's simplicity comes with superior scalability as cache hits require no locking. Our prototype achieves twice the throughput of an optimized 16- thread LRU implementation. SIEVE is more than an eviction algorithm; it can be used as a cache primitive to build advanced eviction algorithms just like FIFO and LRU.},
  booktitle = {Proceedings of the 21st USENIX Symposium on Networked Systems Design and Implementation},
  articleno = {68},
  numpages = {18},
  location = {Santa Clara, CA, USA},
  series = {NSDI'24}
}


@article{web-cache-overview,
  author={Balamash, Abdullah and Krunz, Marwan},
  journal={IEEE Communications Surveys \& Tutorials}, 
  title={An overview of web caching replacement algorithms}, 
  year={2004},
  volume={6},
  number={2},
  pages={44-56},
  doi={10.1109/COMST.2004.5342239}
}


@inproceedings{s3-fifo,
  author = {Yang, Juncheng and Zhang, Yazhuo and Qiu, Ziyue and Yue, Yao and Vinayak, Rashmi},
  title = {FIFO queues are all you need for cache eviction},
  year = {2023},
  isbn = {9798400702297},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3600006.3613147},
  doi = {10.1145/3600006.3613147},
  abstract = {As a cache eviction algorithm, FIFO has a lot of attractive properties, such as simplicity, speed, scalability, and flash-friendliness. The most prominent criticism of FIFO is its low efficiency (high miss ratio).In this work, we demonstrate a simple, scalable FIFO-based algorithm with three static queues (S3-FIFO). Evaluated on 6594 cache traces from 14 datasets, we show that S3-FIFO has lower miss ratios than state-of-the-art algorithms across traces. Moreover, S3-FIFO's efficiency is robust --- it has the lowest mean miss ratio on 10 of the 14 datasets. FIFO queues enable S3-FIFO to achieve good scalability with 6\texttimes{} higher throughput compared to optimized LRU at 16 threads.Our insight is that most objects in skewed workloads will only be accessed once in a short window, so it is critical to evict them early (also called quick demotion). The key of S3-FIFO is a small FIFO queue that filters out most objects from entering the main cache, which provides a guaranteed demotion speed and high demotion precision.},
  booktitle = {Proceedings of the 29th Symposium on Operating Systems Principles},
  pages = {130-149},
  numpages = {20},
  location = {Koblenz, Germany},
  series = {SOSP '23}
}